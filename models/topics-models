const db = require("../db/connection.js");
const apiList = require("../endpoints.json");
//const format = require("pg-format");

function fetchTopics() {
  return db.query("SELECT * FROM topics;").then((result) => {
    return result.rows;
  });
}

function fetchApi() {
  return Promise.resolve(apiList);
}

function fetchArticleById(articleIndex) {
  return db
    .query("SELECT * FROM articles WHERE article_id = $1;", [articleIndex])
    .then((result) => {
      if (result.rows.length === 0) {
        return Promise.reject({ status: 404, msg: "Article not found" });
      } else return result.rows[0];
    });
}

function fetchArticles() {
  return db
    .query(
      `
  SELECT articles.author,title,articles.article_id,topic,articles.created_at,articles.votes,article_img_url, 
  COUNT(comments.body) AS comment_count 
  FROM articles 
  LEFT JOIN comments ON articles.article_id=comments.article_id 
  GROUP BY articles.article_id 
  ORDER BY articles.created_at DESC`
    )
    .then((result) => {
      return result.rows;
    });
}

function fetchCommentByArticleId(articleIndex) {
  return db
    .query(
      `SELECT * FROM comments 
    WHERE article_id = $1 
    ORDER BY created_at DESC;`,
      [articleIndex]
    )
    .then((result) => {
      if (result.rows.length === 0) {
        return Promise.reject({ status: 404, msg: "Article not found" });
      } else return result.rows;
    });
}

function addCommentByArticleId(articleId, username, body) {
  return db
    .query(
      `INSERT INTO comments (body, author, article_id) 
      VALUES ($1, $2, $3) RETURNING *;`,
      [body, username, articleId]
    )
    .then((result) => {
      return result.rows[0];
    });
}

module.exports = {
  fetchTopics,
  fetchApi,
  fetchArticleById,
  fetchArticles,
  fetchCommentByArticleId,
  addCommentByArticleId,
};
